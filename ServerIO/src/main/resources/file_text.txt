Hello server!

В основу работы в сети, поддерживаемой в Java, положено понятие сокета, обозначающего конечную точку в Сети. Сокеты составляют основу современных способов работы в Сети, поскольку сокет позволяет отдельному компьютеру одновременно обслуживать много разных клиентов, предоставляя разные виды информации. Эта цель достигается благодаря применению порта — нумерованного сокета на отдельной машине.
Говорят, что серверный процесс «прослушивает» порт до тех пор, пока клиент не соединится с ним. Сервер в состоянии принять запросы от многих клиентов, подключаемых к порту с одним и тем же номером, хотя каждый сеанс связи индивидуален. Для управления соединениями со многими клиентами серверный процесс должен быть многопоточным или располагать какими-то другими средствами для мультиплексирования одновременного ввода-вывода.
Связь между сокетами устанавливается и поддерживается по определенному сетевому протоколу. Протокол Интернета (IP) является низкоуровневым маршрутизирующим сетевым протоколом, разбивающим данные на небольшие пакеты и посылающим их через Сеть по определенному адресу, что не гарантирует доставки всех этих пакетов по этому адресу. Протокол управления передачи (ТСР) является сетевым протоколом более высокого уровня, обеспечивающим связывание, сортировку и повторную передачу пакетов, чтобы обеспечить надежную доставку данных. Еще одним сетевым протоколом является протокол пользовательских дейтаграмм (UDP). Этот сетевой протокол может быть использован непосредственно для поддержки быстрой, не требующей постоянного соединения и надежной транспортировки пакетов.
Как только соединение будет установлено, в действие вступает высокоуровневый протокол, тип которого зависит от используемого порта. Протокол ТСР/IP резервирует первые 1 024 порта для отдельных протоколов. Например, порт 21 выделен для протокола FTР, порт 23 — для протокола Telnet, порт 25 — для электронной почты, порт 80 — для протокола НТТР и т.д. Каждый сетевой протокол определяет порядок взаимодействия клиента с портом.
Например, протокол НТТР используется серверами и веб-браузерами для передачи гипертекста и графических изображений. Это довольно простой протокол для базового постраничного просмотра информации, предоставляемой веб-серверами. Рассмотрим принцип его действия. Когда клиент запрашивает файл у НТТР-сервера, это действие называется обращением. Оно состоит в том, чтобы отправить имя файла в специальном формате в предопределенный порт и затем прочитать содержимое этого файла. Сервер также сообщает код состояния, чтобы известить клиента, был ли запрос обслужен, а также причину, по которой он не может быть обслужен.
Главной составляющей Интернета является адрес, который есть у каждого компьютера в Сети. Изначально все адреса состояли из 32-разрядных значений, организованных по четыре 8-разрядных значения. Адрес такого типа определен в протоколе IPv4. Но в последнее время вступила в действие новая схема адресации, называемая IPv6 и предназначенная для поддержки намного большего адресного пространства. Правда, для сетевого программирования нa Java обычно не приходится беспокоиться, какого типа адрес используется: IPv4 или IPv6, поскольку эта задача решается в Java автоматически.
Сокеты по протоколу ТСР/IP служат для реализации надежных двунаправленных постоянных двухточечных потоковых соединений между хостами в Интернете. Сокет может служить для подключения системы ввода-вывода в Java к другим программам, которые могут находиться как на локальной машине, так и на любой другой в Интернете.
В Java поддерживаются две разновидности сокетов по протоколу ТСР/IP: один — для серверов, другой — для клиентов. Класс ServerSocket предназначен для создания сервера, который будет обрабатывать клиентские подключения, тогда как класс Socket предназначен для обмена данными между сервером и клиентами по сетевому протоколу. При создании объекта типа Socket неявно устанавливается соединение клиента с сервером.
Для доступа к потокам ввода-вывода, связанным с классом Socket, можно воспользоваться методами getInputStream() и getOutputStream(). Каждый из этих методов может сгенерировать исключение типа IOException, если сокет оказался недействительным из-за потери соединения. Эти потоки ввода-вывода используются для передачи и приема данных.